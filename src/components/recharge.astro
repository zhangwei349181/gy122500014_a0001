<!-- 账户充值弹窗 -->
<div class="modal fade" id="rechargeModal" data-bs-keyboard="false" tabindex="-1" aria-labelledby="rechargeModalTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
    <div class="modal-content p-3">
      <div class="modal-header">
        <h3 class="modal-title" id="rechargeModalTitle">账户充值</h3>
        <button type="button" class="btn-close shadow-none" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- 充值表单 -->
        <form class="needs-validation" id="rechargeForm" novalidate>
          <div class="mb-4">
            <label for="amount" class="form-label">充值金额 (USDC)<span class="text-danger">*</span></label>
            <input type="number" id="amount" name="amount" min="1" step="0.01" class="form-control form-control-lg fs-6 shadow-none rounded-0" required>
            <div class="invalid-feedback">请输入充值金额</div>
          </div>
          <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
            <button type="submit" class="btn btn-primary">确认充值</button>
          </div>
        </form>

        <!-- 支付信息 -->
        <div id="paymentInfo" class="d-none">
          <div class="text-center mb-4">
            <div id="qrcode" class="mx-auto p-3 border rounded" style="width: 200px; height: 200px;"></div>
            <p class="mt-2 text-muted">请使用USDC支付</p>
          </div>
          <div class="bg-light p-4 rounded mb-4">
            <p class="mb-2">钱包地址：<span id="walletAddress" class="font-monospace"></span></p>
            <p class="mb-2">支付金额：<span id="paymentAmount" class="fw-bold"></span> USDC</p>
            <p class="mb-0">剩余时间：<span id="countdown" class="fw-bold"></span></p>
          </div>
          <div id="paymentStatus" class="text-center"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import QRCode from 'qrcode';

  // 声明 bootstrap 类型
  declare const bootstrap: {
    Modal: {
      new (element: HTMLElement): {
        show(): void;
        hide(): void;
      };
      getInstance(element: HTMLElement | null): {
        hide(): void;
        show(): void;
      } | null;
    };
  };

  // 获取用户数据
  function getUserData() {
    const userDataStr = localStorage.getItem('userData');
    return userDataStr ? JSON.parse(userDataStr) : null;
  }

  // 取消订单函数
  async function cancelOrder(orderId: string) {
    if (!orderId) {
      console.error('取消订单失败: 订单ID为空');
      return false;
    }
    
    try {
      const response = await fetch('https://cyadmin.shopaeo.cn/api/payment/cancel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ order_id: orderId })
      });
      
      if (response.ok) {
        console.log('订单取消成功:', orderId);
        return true;
      } else {
        console.error('订单取消失败:', orderId);
        return false;
      }
    } catch (error) {
      console.error('订单取消请求失败:', error);
      return false;
    }
  }

  // 支付相关函数
  function initPayment() {
    const modalEl = document.getElementById('rechargeModal');
    const form = document.getElementById('rechargeForm') as HTMLFormElement;
    const paymentInfo = document.getElementById('paymentInfo');
    let checkPaymentInterval: ReturnType<typeof setInterval> | null = null;
    let countdownInterval: ReturnType<typeof setInterval> | null = null;
    let currentOrderId: string | null = null;
    
    // 关闭弹窗
    const closeModal = async () => {
      if (modalEl) {
        const modal = bootstrap.Modal.getInstance(modalEl);
        modal?.hide();
        if (form) form.reset();
        if (paymentInfo) paymentInfo.classList.add('d-none');
        
        // 清除定时器
        if (checkPaymentInterval) clearInterval(checkPaymentInterval);
        if (countdownInterval) clearInterval(countdownInterval);
        
        // 检查并取消未完成的订单
        if (currentOrderId) {
          try {
            await cancelOrder(currentOrderId);
          } catch (error) {
            console.error('取消订单失败:', error);
          }
          currentOrderId = null;
        }
      }
    };

    // 更新倒计时显示
    async function updateCountdown(endTime: number) {
      const countdownElement = document.getElementById('countdown');
      if (!countdownElement) return;

      const now = Date.now();
      const timeLeft = Math.max(0, endTime - now);
      
      if (timeLeft === 0) {
        if (checkPaymentInterval) clearInterval(checkPaymentInterval);
        if (countdownInterval) clearInterval(countdownInterval);
        const paymentStatus = document.getElementById('paymentStatus');
        if (paymentStatus) {
          paymentStatus.innerHTML = `
            <div class="text-danger">
              <p>支付超时</p>
              <p class="small mt-2">订单已关闭，请重新发起支付</p>
            </div>
          `;
        }
        // 取消订单
        if (currentOrderId) {
          try {
            await cancelOrder(currentOrderId);
            currentOrderId = null;
          } catch (error) {
            console.error('取消超时订单失败:', error);
          }
        }
        return;
      }

      const minutes = Math.floor(timeLeft / 60000);
      const seconds = Math.floor((timeLeft % 60000) / 1000);
      countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    // 检查支付状态
    async function checkPaymentStatus(orderId: string) {
      try {
        const response = await fetch(`https://cyadmin.shopaeo.cn/api/payment/status/${orderId}`);
        const data = await response.json() as { success: boolean; status: number };
        
        if (data.success) {
          const paymentStatus = document.getElementById('paymentStatus');
          if (!paymentStatus) return;

          switch (data.status) {
            case 1: // 已支付
              if (checkPaymentInterval) clearInterval(checkPaymentInterval);
              if (countdownInterval) clearInterval(countdownInterval);
              paymentStatus.innerHTML = `
                <div class="text-success">
                  <p>支付成功</p>
                  <p class="small mt-2">请查看余额与订单记录</p>
                </div>
              `;
              setTimeout(closeModal, 3000);
              break;
            case 3: // 已失败
              if (checkPaymentInterval) clearInterval(checkPaymentInterval);
              if (countdownInterval) clearInterval(countdownInterval);
              paymentStatus.innerHTML = `
                <div class="text-danger">
                  <p>支付失败</p>
                  <p class="small mt-2">请重新发起支付</p>
                </div>
              `;
              break;
          }
        }
      } catch (error) {
        console.error('检查支付状态失败:', error);
      }
    }

    // 生成二维码的函数
    async function generateQRCode(text: string, element: HTMLElement) {
      try {
        const dataUrl = await QRCode.toDataURL(text, {
          width: 192,
          margin: 1,
          color: {
            dark: '#000000',
            light: '#ffffff'
          }
        });
        
        const img = document.createElement('img');
        img.src = dataUrl;
        img.width = 192;
        img.height = 192;
        element.innerHTML = '';
        element.appendChild(img);
      } catch (error) {
        console.error('生成二维码失败:', error);
        element.innerHTML = '<p class="text-danger">生成二维码失败</p>';
      }
    }

    // 表单提交
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      // 表单验证
      if (form && !form.checkValidity()) {
        e.stopPropagation();
        form.classList.add('was-validated');
        return;
      }

      const user = getUserData();
      if (!user?.user_id) return;

      const amount = (document.getElementById('amount') as HTMLInputElement)?.value;
      
      try {
        // 创建支付订单
        const response = await fetch('https://cyadmin.shopaeo.cn/api/payment/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            user_id: user.user_id,
            amount: parseFloat(amount)
          })
        });

        const data = await response.json() as { 
          success: boolean; 
          message?: string;
          order_id?: string;
          wallet_address?: string;
        };
        
        if (response.ok && data.success) {
          // 显示支付信息
          if (form) form.classList.add('d-none');
          if (paymentInfo) paymentInfo.classList.remove('d-none');
          
          // 设置支付信息
          currentOrderId = data.order_id!;
          document.getElementById('walletAddress')!.textContent = data.wallet_address!;
          document.getElementById('paymentAmount')!.textContent = amount;
          
          // 生成二维码
          const qrcodeDiv = document.getElementById('qrcode');
          if (qrcodeDiv) {
            await generateQRCode(data.wallet_address!, qrcodeDiv);
          }
          
          // 设置倒计时
          const endTime = Date.now() + 10 * 60 * 1000; // 10分钟
          updateCountdown(endTime);
          countdownInterval = setInterval(() => updateCountdown(endTime), 1000);
          
          // 开始检查支付状态
          checkPaymentInterval = setInterval(() => checkPaymentStatus(data.order_id!), 5000);
        } else {
          throw new Error(data.message || '创建订单失败');
        }
      } catch (error) {
        console.error('创建支付订单失败:', error);
        alert('创建支付订单失败: ' + (error instanceof Error ? error.message : '未知错误'));
        if (currentOrderId) {
          try {
            await cancelOrder(currentOrderId);
          } catch (cancelError) {
            console.error('取消订单失败:', cancelError);
          }
          currentOrderId = null;
        }
      }
    });
  }

  // 初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initPayment();
    });
  } else {
    initPayment();
  }
</script> 