<div class="mb-5">
    <h2 class="h4 mb-3">Payment Orders</h2>
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th scope="col" class="fw-medium text-uppercase">#ID</th>
                    <th scope="col" class="fw-medium text-uppercase">订单号</th>
                    <th scope="col" class="fw-medium text-uppercase">类型</th>
                    <th scope="col" class="fw-medium text-uppercase">金额</th>
                    <th scope="col" class="fw-medium text-uppercase">状态</th>
                    <th scope="col" class="fw-medium text-uppercase">创建时间</th>
                    <th scope="col" class="fw-medium text-uppercase">操作</th>
                </tr>
            </thead>
            <tbody id="orderList">
                <tr>
                    <td colspan="7" class="text-center">加载中...</td>
                </tr>
            </tbody>
        </table>
    </div>
    <!-- 分页控件 -->
    <nav aria-label="订单分页" class="mt-3">
        <ul class="pagination justify-content-center" id="orderPagination">
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="上一页">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <li class="page-item active">
                <a class="page-link" href="#">1</a>
            </li>
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="下一页">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
</div>

<!-- 订单详情弹窗 -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailModalLabel">订单详情</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>订单号：</strong><span id="detailOrderId"></span></p>
                        <p><strong>类型：</strong><span id="detailType"></span></p>
                        <p><strong>金额：</strong><span id="detailAmount"></span></p>
                        <p><strong>状态：</strong><span id="detailStatus"></span></p>
                        <p><strong>创建时间：</strong><span id="detailCreatedAt"></span></p>
                        <p><strong>过期时间：</strong><span id="detailExpiredAt"></span></p>
                        <p><strong>支付时间：</strong><span id="detailPaidAt"></span></p>
                        <p><strong>交易哈希：</strong><span id="detailTxHash"></span></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>用户ID：</strong><span id="detailUserId"></span></p>
                        <p><strong>用户名：</strong><span id="detailUserName"></span></p>
                        <p><strong>钱包地址：</strong><span id="detailWalletAddress"></span></p>
                        <p><strong>平台：</strong><span id="detailPlatform"></span></p>
                        <p><strong>D1：</strong><span id="detailD1"></span></p>
                        <p><strong>D2：</strong><span id="detailD2"></span></p>
                        <p><strong>D3：</strong><span id="detailD3"></span></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
interface Order {
    id: number;
    order_id: string;
    type: number;
    amount: number;
    status: number;
    status_text: string;
    created_at: string;
    expired_at: string;
    paid_at: string;
    tx_hash: string;
    user_id: number;
    user_name: string;
    wallet_address: string;
    platform_name: string;
    d1_name: string;
    d2_name: string;
    d3_name: string;
}

interface PayType {
    type_id: number;
    type_name: string;
}

interface PayTypeResponse {
    success: boolean;
    data: PayType[];
}

interface ApiResponse {
    success: boolean;
    orders: Order[];
    total: number;
    page: number;
    pageSize: number;
}

let currentPage = 1;
let totalPages = 1;
const pageSize = 10;
let payTypes: PayType[] = [];

// 获取支付类型
async function fetchPayTypes() {
    try {
        const response = await fetch('https://cyadmin.shopaeo.cn/api/payment/pay_type');
        if (!response.ok) {
            console.error('获取支付类型失败:', response.status);
            return;
        }
        const data = await response.json() as PayTypeResponse;
        if (data && data.success && Array.isArray(data.data)) {
            payTypes = data.data;
        } else {
            console.error('支付类型数据格式错误:', data);
            payTypes = []; // 设置为空数组，避免后续使用时出错
        }
    } catch (error) {
        console.error('获取支付类型失败:', error);
        payTypes = []; // 设置为空数组，避免后续使用时出错
    }
}

// 获取支付类型名称
function getPayTypeName(typeId: number): string {
    if (!Array.isArray(payTypes) || payTypes.length === 0) {
        return typeId === 1 ? 'USDC' : '其他'; // 默认显示
    }
    const payType = payTypes.find(t => t.type_id === typeId);
    return payType ? payType.type_name : (typeId === 1 ? 'USDC' : '其他');
}

// 获取订单列表
async function fetchOrders(page: number = 1) {
    try {
        const userDataStr = localStorage.getItem('userData');
        if (!userDataStr) return;

        const userData = JSON.parse(userDataStr);
        if (!userData?.user_id) return;

        const url = new URL('https://cyadmin.shopaeo.cn/api/payment/user-orders');
        url.searchParams.set('user_id', userData.user_id.toString());
        url.searchParams.set('page', page.toString());
        url.searchParams.set('pageSize', pageSize.toString());

        const response = await fetch(url);
        const data = await response.json() as ApiResponse;
        
        if (response.ok && data.success) {
            currentPage = page;
            totalPages = Math.ceil(data.total / pageSize);
            updateOrderList(data.orders);
            updatePagination();
        }
    } catch (error) {
        console.error('获取订单列表失败:', error);
    }
}

// 更新订单列表显示
function updateOrderList(orders: Order[]) {
    const orderListEl = document.getElementById('orderList');
    if (!orderListEl) return;

    if (orders.length === 0) {
        orderListEl.innerHTML = '<tr><td colspan="7" class="text-center">暂无订单</td></tr>';
        return;
    }

    orderListEl.innerHTML = orders.map(order => `
        <tr>
            <th scope="row">${order.id}</th>
            <td>${order.order_id}</td>
            <td>${getPayTypeName(order.type)}</td>
            <td>$${Number(order.amount).toFixed(2)}</td>
            <td>${order.status_text}</td>
            <td>${new Date(order.created_at).toLocaleString()}</td>
            <td>
                <button class="btn btn-sm btn-primary view-order-btn" data-order='${JSON.stringify(order)}'>
                    <span>查看</span>
                    <i class="bi bi-arrow-right"></i>
                </button>
            </td>
        </tr>
    `).join('');

    // 为所有查看按钮添加事件监听器
    document.querySelectorAll('.view-order-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const orderData = JSON.parse((btn as HTMLElement).dataset.order || '{}');
            showOrderDetail(orderData);
        });
    });
}

// 显示订单详情
function showOrderDetail(order: Order) {
    const modalEl = document.getElementById('orderDetailModal');
    if (!modalEl) return;
    
    const modal = new (window as any).bootstrap.Modal(modalEl);
    
    // 更新详情内容
    document.getElementById('detailOrderId')!.textContent = order.order_id;
    document.getElementById('detailType')!.textContent = getPayTypeName(order.type);
    document.getElementById('detailAmount')!.textContent = `$${Number(order.amount).toFixed(2)}`;
    document.getElementById('detailStatus')!.textContent = order.status_text;
    document.getElementById('detailCreatedAt')!.textContent = new Date(order.created_at).toLocaleString();
    document.getElementById('detailExpiredAt')!.textContent = order.expired_at ? new Date(order.expired_at).toLocaleString() : '-';
    document.getElementById('detailPaidAt')!.textContent = order.paid_at ? new Date(order.paid_at).toLocaleString() : '-';
    document.getElementById('detailTxHash')!.textContent = order.tx_hash || '-';
    document.getElementById('detailUserId')!.textContent = order.user_id.toString();
    document.getElementById('detailUserName')!.textContent = order.user_name;
    document.getElementById('detailWalletAddress')!.textContent = order.wallet_address || '-';
    document.getElementById('detailPlatform')!.textContent = order.platform_name || '-';
    document.getElementById('detailD1')!.textContent = order.d1_name || '-';
    document.getElementById('detailD2')!.textContent = order.d2_name || '-';
    document.getElementById('detailD3')!.textContent = order.d3_name || '-';

    modal.show();
}

// 更新分页控件
function updatePagination() {
    const paginationEl = document.getElementById('orderPagination');
    if (!paginationEl) return;

    let paginationHtml = `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="上一页">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
    `;

    // 计算显示的页码范围
    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);

    // 调整范围以确保始终显示5个页码（如果有）
    if (endPage - startPage < 4) {
        if (startPage === 1) {
            endPage = Math.min(5, totalPages);
            startPage = 1;
        } else if (endPage === totalPages) {
            startPage = Math.max(1, endPage - 4);
        }
    }

    // 添加第一页
    if (startPage > 1) {
        paginationHtml += `
            <li class="page-item">
                <a class="page-link" href="#" data-page="1">1</a>
            </li>
            ${startPage > 2 ? '<li class="page-item disabled"><span class="page-link">...</span></li>' : ''}
        `;
    }

    // 添加页码
    for (let i = startPage; i <= endPage; i++) {
        paginationHtml += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
                <a class="page-link" href="#" data-page="${i}">${i}</a>
            </li>
        `;
    }

    // 添加最后一页
    if (endPage < totalPages) {
        paginationHtml += `
            ${endPage < totalPages - 1 ? '<li class="page-item disabled"><span class="page-link">...</span></li>' : ''}
            <li class="page-item">
                <a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>
            </li>
        `;
    }

    // 添加下一页按钮
    paginationHtml += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="下一页">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    `;

    paginationEl.innerHTML = paginationHtml;

    // 添加页码点击事件
    paginationEl.querySelectorAll('.page-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const page = parseInt((e.target as HTMLElement).dataset.page || '1');
            if (page && page !== currentPage && page >= 1 && page <= totalPages) {
                fetchOrders(page);
            }
        });
    });
}

// 页面加载时获取订单列表和支付类型
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', async () => {
        await fetchPayTypes();
        fetchOrders(1);
    });
} else {
    fetchPayTypes().then(() => {
        fetchOrders(1);
    });
}
</script>