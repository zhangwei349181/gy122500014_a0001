---
import PaymentManual from './paymentmanual.astro';
---

<div class="mb-5">
    <h2 class="h4 mb-3">零售订单</h2>
    <div class="table-responsive">
        <table class="table table-bordered" style="min-width: 1200px;">
            <thead>
                <tr>
                    <th scope="col" class="fw-medium text-uppercase" style="min-width: 80px;">#ID</th>
                    <th scope="col" class="fw-medium text-uppercase" style="min-width: 200px;">订单号</th>
                    <th scope="col" class="fw-medium text-uppercase" style="min-width: 100px;">支付方式</th>
                    <th scope="col" class="fw-medium text-uppercase" style="min-width: 100px;">金额</th>
                    <th scope="col" class="fw-medium text-uppercase" style="min-width: 100px;">状态</th>
                    <th scope="col" class="fw-medium text-uppercase" style="min-width: 160px;">创建时间</th>
                    <th scope="col" class="fw-medium text-uppercase" style="min-width: 100px;">操作</th>
                </tr>
            </thead>
            <tbody id="retailOrderList">
                <tr>
                    <td colspan="7" class="text-center">加载中...</td>
                </tr>
            </tbody>
        </table>
    </div>
    <!-- 分页控件 -->
    <nav aria-label="零售订单分页" class="mt-3">
        <ul class="pagination justify-content-center" id="retailOrderPagination">
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="上一页">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <li class="page-item active">
                <a class="page-link" href="#">1</a>
            </li>
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="下一页">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
</div>

<!-- 零售订单详情弹窗 -->
<div class="modal fade" id="retailOrderDetailModal" tabindex="-1" aria-labelledby="retailOrderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content p-3">
            <div class="modal-header">
                <h5 class="modal-title" id="retailOrderDetailModalLabel">零售订单详情</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <p><strong>订单号：</strong><span id="detailOrderNumber"></span></p>
                        <p><strong>支付方式：</strong><span id="detailPayWay"></span></p>
                        <p><strong>支付类型：</strong><span id="detailPayType"></span></p>
                        <p><strong>金额：</strong><span id="detailAmount"></span></p>
                        <p><strong>状态：</strong><span id="detailStatus"></span></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>创建时间：</strong><span id="detailCreatedAt"></span></p>
                        <p><strong>更新时间：</strong><span id="detailUpdatedAt"></span></p>
                        <p><strong>平台ID：</strong><span id="detailPlatformId"></span></p>
                        <p><strong>D1：</strong><span id="detailD1"></span></p>
                        <p><strong>D2：</strong><span id="detailD2"></span></p>
                        <p><strong>D3：</strong><span id="detailD3"></span></p>
                    </div>
                </div>
                
                <h6 class="mb-3">订单商品详情</h6>
                <div class="table-responsive">
                    <table class="table table-bordered" style="min-width: 1200px;">
                        <thead>
                            <tr>
                                <th scope="col" style="min-width: 100px;">商品ID</th>
                                <th scope="col" style="min-width: 120px;">SKU</th>
                                <th scope="col" style="min-width: 100px;">单价</th>
                                <th scope="col" style="min-width: 80px;">数量</th>
                                <th scope="col" style="min-width: 100px;">总价</th>
                                <th scope="col" style="min-width: 100px;">运费</th>
                                <th scope="col" style="min-width: 100px;">税费</th>
                                <th scope="col" style="min-width: 300px;">收货地址</th>
                                <th scope="col" style="min-width: 200px;">备注</th>
                            </tr>
                        </thead>
                        <tbody id="detailProductsList">
                            <tr>
                                <td colspan="9" class="text-center">加载中...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<PaymentManual />

<style>
/* 确保表格在移动端可以横向滚动且保持列宽 */
.table-responsive {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    margin-bottom: 1rem;
}

/* 美化横向滚动条 */
.table-responsive::-webkit-scrollbar {
    height: 8px;
}

.table-responsive::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.table-responsive::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

.table-responsive::-webkit-scrollbar-thumb:hover {
    background: #555;
}

/* 表格内容样式优化 */
.table td, .table th {
    white-space: nowrap;
    vertical-align: middle;
}

/* 地址信息换行显示 */
.table td:last-child {
    white-space: normal;
    max-width: 300px;
}

/* 确保弹窗在移动端也能获得良好的显示效果 */
@media (max-width: 768px) {
    .modal-xl {
        margin: 0.5rem;
    }
    
    .modal-content {
        max-height: calc(100vh - 2rem);
        overflow-y: auto;
    }
}
</style>

<script>
interface RetailOrderDetail {
    detail_id: number;
    product_id: number;
    address_id: number;
    sku: string;
    shipping_fee: number;
    tax_fee: number;
    quantity: number;
    Single_price: number;
    total_price: number;
    Remark: string;
}

interface RetailOrder {
    order_id: number;
    user_id: number;
    order_number: string;
    total_amount: number;
    pay_way: number;
    pay_type: number;
    status: number;
    created_at: string;
    updated_at: string;
    platform_id: number;
    d1: number;
    d2: number;
    d3: number;
    details: RetailOrderDetail[];
}

interface PayType {
    type_id: number;
    type_name: string;
}

interface PayTypeResponse {
    success: boolean;
    data: PayType[];
}

interface ApiResponse {
    success: boolean;
    orders: RetailOrder[];
    pagination: {
        total: number;
        page: number;
        pageSize: number;
        totalPages: number;
    };
}

let currentPage = 1;
let totalPages = 1;
const pageSize = 10;
let payTypes: PayType[] = [];

// 获取支付类型
async function fetchPayTypes() {
    try {
        const response = await fetch('https://cyadmin.shopaeo.cn/api/payment/pay_type');
        if (!response.ok) {
            console.error('获取支付类型失败:', response.status);
            return;
        }
        const data = await response.json() as PayTypeResponse;
        if (data && data.success && Array.isArray(data.data)) {
            payTypes = data.data;
        } else {
            console.error('支付类型数据格式错误:', data);
            payTypes = []; // 设置为空数组，避免后续使用时出错
        }
    } catch (error) {
        console.error('获取支付类型失败:', error);
        payTypes = []; // 设置为空数组，避免后续使用时出错
    }
}

// 获取支付方式名称
function getPayWayName(payWay: number): string {
    switch (payWay) {
        case 1: return '钱包支付';
        case 2: return '直接支付';
        default: return '未知';
    }
}

// 获取支付类型名称
function getPayTypeName(typeId: number): string {
    if (!Array.isArray(payTypes) || payTypes.length === 0) {
        return typeId === 1 ? 'USDC' : '其他'; // 默认显示
    }
    const payType = payTypes.find(t => t.type_id === typeId);
    return payType ? payType.type_name : (typeId === 1 ? 'USDC' : '其他');
}

// 获取订单状态名称
function getStatusName(status: number): string {
    switch (status) {
        case 1: return '未支付';
        case 2: return '已支付';
        case 3: return '已发货';
        case 4: return '已完成';
        default: return '未知';
    }
}

// 获取订单列表
async function fetchRetailOrders(page: number = 1) {
    try {
        const userDataStr = localStorage.getItem('userData');
        if (!userDataStr) return;

        const userData = JSON.parse(userDataStr);
        if (!userData?.user_id) return;

        const url = new URL('https://cyadmin.shopaeo.cn/api/Retail_orders/list');
        url.searchParams.set('user_id', userData.user_id.toString());
        url.searchParams.set('page', page.toString());
        url.searchParams.set('pageSize', pageSize.toString());

        const response = await fetch(url);
        const data = await response.json() as ApiResponse;
        
        if (response.ok && data.success) {
            currentPage = page;
            totalPages = data.pagination.totalPages;
            updateRetailOrderList(data.orders);
            updatePagination();
        }
    } catch (error) {
        console.error('获取零售订单列表失败:', error);
    }
}

// 更新零售订单列表显示
function updateRetailOrderList(orders: RetailOrder[]) {
    const orderListEl = document.getElementById('retailOrderList');
    if (!orderListEl) return;

    if (orders.length === 0) {
        orderListEl.innerHTML = '<tr><td colspan="7" class="text-center">暂无零售订单</td></tr>';
        return;
    }

    orderListEl.innerHTML = orders.map(order => `
        <tr>
            <th scope="row">${order.order_id}</th>
            <td>${order.order_number}</td>
            <td>${getPayWayName(order.pay_way)}</td>
            <td>$${Number(order.total_amount).toFixed(2)}</td>
            <td>${getStatusName(order.status)}
                ${order.pay_way === 2 && order.pay_type === 2 && order.status === 1 ? `
                    <button class="btn btn-sm btn-success ms-2 complete-payment-btn"
                        data-bs-toggle="modal"
                        data-bs-target="#paymentManualModal"
                        data-order-id="${order.order_id}"
                        data-order-type="retail"
                        data-amount="${order.total_amount}">
                        完成支付
                    </button>
                ` : ''}
                ${order.pay_way === 1 && order.status === 1 ? `
                    <button class="btn btn-sm btn-primary ms-2 wallet-payment-btn"
                        data-order-id="${order.order_id}"
                        data-amount="${order.total_amount}">
                        继续扣款
                    </button>
                ` : ''}
            </td>
            <td>${new Date(order.created_at).toLocaleString()}</td>
            <td>
                <button class="btn btn-sm btn-primary view-retail-order-btn" data-order='${JSON.stringify(order)}'>
                    <span>查看</span>
                    <i class="bi bi-arrow-right"></i>
                </button>
            </td>
        </tr>
    `).join('');

    // 为所有查看按钮添加事件监听器
    document.querySelectorAll('.view-retail-order-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const orderData = JSON.parse((btn as HTMLElement).dataset.order || '{}');
            showRetailOrderDetail(orderData);
        });
    });

    // 为所有钱包扣款按钮添加事件监听器
    document.querySelectorAll('.wallet-payment-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const orderId = parseInt((btn as HTMLElement).dataset.orderId || '0');
            const amount = parseFloat((btn as HTMLElement).dataset.amount || '0');
            if (orderId && amount) {
                if (confirm(`确认要从钱包中扣除 $${amount.toFixed(2)} 吗？`)) {
                    handleWalletPayment(orderId, amount);
                }
            }
        });
    });
}

// 显示零售订单详情
function showRetailOrderDetail(order: RetailOrder) {
    const modalEl = document.getElementById('retailOrderDetailModal');
    if (!modalEl) return;
    
    const modal = new (window as any).bootstrap.Modal(modalEl);
    
    // 更新详情内容
    document.getElementById('detailOrderNumber')!.textContent = order.order_number;
    document.getElementById('detailPayWay')!.textContent = getPayWayName(order.pay_way);
    document.getElementById('detailPayType')!.textContent = getPayTypeName(order.pay_type);
    document.getElementById('detailAmount')!.textContent = `$${Number(order.total_amount).toFixed(2)}`;
    document.getElementById('detailStatus')!.textContent = getStatusName(order.status);
    document.getElementById('detailCreatedAt')!.textContent = new Date(order.created_at).toLocaleString();
    document.getElementById('detailUpdatedAt')!.textContent = new Date(order.updated_at).toLocaleString();
    document.getElementById('detailPlatformId')!.textContent = order.platform_id.toString();
    document.getElementById('detailD1')!.textContent = order.d1.toString();
    document.getElementById('detailD2')!.textContent = order.d2.toString();
    document.getElementById('detailD3')!.textContent = order.d3.toString();

    // 更新商品详情列表
    const productsListEl = document.getElementById('detailProductsList');
    if (productsListEl && order.details && order.details.length > 0) {
        // 先显示加载中的状态
        productsListEl.innerHTML = '<tr><td colspan="9" class="text-center">加载中...</td></tr>';
        
        // 获取所有地址信息
        const addressPromises = order.details.map(detail => 
            fetchAddressInfo(detail.address_id)
        );
        
        // 等待所有地址信息加载完成
        Promise.all(addressPromises).then(addresses => {
            // 更新商品详情列表，包含地址信息
            productsListEl.innerHTML = order.details.map((detail, index) => {
                const address = addresses[index];
                const addressText = address ? 
                    `收货人姓名：${address.consignee}；<br>电话：${address.phone}<br>区域ID：${address.region_id}；<br>详细地址：${address.address}` : 
                    '地址信息不可用';
                
                return `
                    <tr>
                        <td><a href="/products/${detail.product_id}" class="text-primary">${detail.product_id}</a></td>
                        <td>${detail.sku}</td>
                        <td>$${Number(detail.Single_price).toFixed(2)}</td>
                        <td>${detail.quantity}</td>
                        <td>$${Number(detail.total_price).toFixed(2)}</td>
                        <td>$${Number(detail.shipping_fee).toFixed(2)}</td>
                        <td>$${Number(detail.tax_fee).toFixed(2)}</td>
                        <td>
                            <small class="text-muted">ID: ${detail.address_id}</small><br>
                            ${addressText}
                        </td>
                        <td>${detail.Remark || '-'}</td>
                    </tr>
                `;
            }).join('');
        }).catch(error => {
            console.error('获取地址信息失败:', error);
            // 如果获取地址失败，仍然显示商品信息，但地址显示为"加载失败"
            productsListEl.innerHTML = order.details.map(detail => `
                <tr>
                    <td><a href="/products/${detail.product_id}" class="text-primary">${detail.product_id}</a></td>
                    <td>${detail.sku}</td>
                    <td>$${Number(detail.Single_price).toFixed(2)}</td>
                    <td>${detail.quantity}</td>
                    <td>$${Number(detail.total_price).toFixed(2)}</td>
                    <td>$${Number(detail.shipping_fee).toFixed(2)}</td>
                    <td>$${Number(detail.tax_fee).toFixed(2)}</td>
                    <td>
                        <small class="text-muted">ID: ${detail.address_id}</small><br>
                        <span class="text-danger">地址信息加载失败</span>
                    </td>
                    <td>${detail.Remark || '-'}</td>
                </tr>
            `).join('');
        });
    } else if (productsListEl) {
        productsListEl.innerHTML = '<tr><td colspan="9" class="text-center">暂无商品详情</td></tr>';
    }

    modal.show();
}

// 获取地址信息
async function fetchAddressInfo(addressId: number) {
    try {
        const response = await fetch(`https://cyadmin.shopaeo.cn/api/user/address/${addressId}`);
        const data = await response.json() as { success: boolean; address?: any };
        
        if (response.ok && data.success && data.address) {
            return data.address;
        }
        return null;
    } catch (error) {
        console.error(`获取地址ID ${addressId} 信息失败:`, error);
        return null;
    }
}

// 更新分页控件
function updatePagination() {
    const paginationEl = document.getElementById('retailOrderPagination');
    if (!paginationEl) return;

    let paginationHtml = `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="上一页">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
    `;

    // 计算显示的页码范围
    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);

    // 调整范围以确保始终显示5个页码（如果有）
    if (endPage - startPage < 4) {
        if (startPage === 1) {
            endPage = Math.min(5, totalPages);
            startPage = 1;
        } else if (endPage === totalPages) {
            startPage = Math.max(1, endPage - 4);
        }
    }

    // 添加第一页
    if (startPage > 1) {
        paginationHtml += `
            <li class="page-item">
                <a class="page-link" href="#" data-page="1">1</a>
            </li>
            ${startPage > 2 ? '<li class="page-item disabled"><span class="page-link">...</span></li>' : ''}
        `;
    }

    // 添加页码
    for (let i = startPage; i <= endPage; i++) {
        paginationHtml += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
                <a class="page-link" href="#" data-page="${i}">${i}</a>
            </li>
        `;
    }

    // 添加最后一页
    if (endPage < totalPages) {
        paginationHtml += `
            ${endPage < totalPages - 1 ? '<li class="page-item disabled"><span class="page-link">...</span></li>' : ''}
            <li class="page-item">
                <a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>
            </li>
        `;
    }

    // 添加下一页按钮
    paginationHtml += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="下一页">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    `;

    paginationEl.innerHTML = paginationHtml;

    // 添加页码点击事件
    paginationEl.querySelectorAll('.page-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const page = parseInt((e.target as HTMLElement).dataset.page || '1');
            if (page && page !== currentPage && page >= 1 && page <= totalPages) {
                fetchRetailOrders(page);
            }
        });
    });
}

// 页面加载时获取零售订单列表和支付类型
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', async () => {
        await fetchPayTypes();
        fetchRetailOrders(1);
    });
} else {
    fetchPayTypes().then(() => {
        fetchRetailOrders(1);
    });
}

// 监听支付提交完成事件
document.addEventListener('paymentSubmitted', () => {
    // 刷新订单列表
    fetchRetailOrders(currentPage);
});

// 在 script 标签内添加钱包扣款函数
async function handleWalletPayment(orderId: number, amount: number) {
    try {
        const userDataStr = localStorage.getItem('userData');
        if (!userDataStr) {
            alert('请先登录');
            return;
        }

        const userData = JSON.parse(userDataStr);
        if (!userData?.user_id) {
            alert('用户信息不完整，请重新登录');
            return;
        }

        const response = await fetch('https://cyadmin.shopaeo.cn/api/Retail_orders/wallet', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                order_id: orderId,
                amount: amount,
                user_id: userData.user_id
            })
        });

        const result = await response.json();
        if (response.ok && result.success) {
            alert('扣款成功');
            // 刷新订单列表
            fetchRetailOrders(currentPage);
        } else {
            throw new Error(result.message || '扣款失败');
        }
    } catch (error) {
        console.error('钱包扣款失败:', error);
        alert((error as Error).message || '扣款失败，请重试');
    }
}
</script>